Phase:  Wildfire
Input: Token Lookup Morph
Options: control = appelt

 Macro: ADJ
(
({Morph.pos == adverb})?
({Morph.pos == verb, Morph.representation == participle} | {Morph.pos == a-pronoun}| {Morph.pos == adjective} )[0, 4]
)


Macro: IN_FOREST
(
(({Token, Token.string == "в"})|({Token, Token.string == "на"})|({Token, Token.string == "над"}))
(ADJ)
({Lookup.majorType == forest})
)

Macro: NEAR
(
({Token, Token.string == "около"})|
(({Token, Token.string == "рядом"})({Token, Token.string == "с"}))|
(({Token, Token.string == "в"})({Token, Token.string == "районе"}))
)

Rule: DryGrass // сухая трава
(
({Lookup.majorType == dry})
({Lookup.majorType == grass})
(IN_FOREST)
)
:bind -->
:bind.Threat_Wildfire = {threat_indicator = "dry_grass"}

Rule: DryTrees // сухие деревья
(
(({Lookup.majorType == dry})|({Lookup.majorType == rubbish_adj}))
({Lookup.majorType == trees})
)
:bind -->
:bind.Threat_Wildfire = {threat_indicator = "dry_trees"}


Rule: Rubbish // мусор, намусорили в лесу
(
(({Lookup.majorType == rubbish})|({Lookup.majorType == fire_litter_verb}))
(IN_FOREST)
)
:bind -->
:bind.Threat_Wildfire = {threat_indicator = "rubbish"}



Rule: FactFire
(
((({Lookup.majorType == forest})|({Lookup.majorType == peat}))({Lookup.majorType == burn})) |
(({Lookup.majorType == burn})(({Lookup.majorType == forest})|({Lookup.majorType == peat}))) | // лес, торф горит
((({Lookup.majorType == burn})| ({Lookup.majorType == fire}) )(NEAR)) // горит около
)
:bind -->
:bind.Fact_Wildfire = {threat_indicator = "fire"}

Rule: FactFire1 // пожар в районе, в лесничестве, под
(
({Lookup.majorType == fire, Lookup.ProperName == "пожар"}):f
({Token, Token.string == "в"})
(({Token.orth == upperInitial })
({Lookup.majorType == region}))
)
:bind -->
:f.Fact_Wildfire = {threat_indicator = "fire"}

Rule: FactFire2 // пожар под
(
({Lookup.majorType == fire, Lookup.ProperName == "пожар"}):f
({Token, Token.string == "под"})
({Token.orth == upperInitial }) : pl
)
:bind -->
:f.Fact_Wildfire = {threat_indicator = "fire"}

Rule: FactSmoke // огонь, дым в лесу
(
({Lookup.majorType == fire}):f
(IN_FOREST)
)
:bind -->
{gate.AnnotationSet fire = (gate.AnnotationSet)bindings.get("f");
gate.Annotation fireAnn = (gate.Annotation)fire.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", fireAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Fact_Wildfire", features);
}

Rule: FactSmoke2 // в  лесу дым
(
(IN_FOREST)
({Lookup.majorType == being})?
({Lookup.majorType == fire}):f
)
:bind -->
{gate.AnnotationSet fire = (gate.AnnotationSet)bindings.get("f");
gate.Annotation fireAnn = (gate.Annotation)fire.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", fireAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Fact_Wildfire", features);
}

Rule: FactSmoke3 // лес в огне
(
({Lookup.majorType == forest})({Token, Token.string == "в"})({Lookup.majorType == fire}):f
)
:bind -->
{gate.AnnotationSet fire = (gate.AnnotationSet)bindings.get("f");
gate.Annotation fireAnn = (gate.Annotation)fire.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", fireAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Fact_Wildfire", features);
}

Rule: FactFireSoot
(
(({Lookup.majorType == soot})({Token, Token.string == "на"})
({Lookup.majorType == soot_on, Lookup.ProperName != "дорога" })) |
(({Lookup.majorType == soot})({Token, Token.string == "на"})
({Lookup.majorType == soot_on, Lookup.ProperName == "дорога" }) (IN_FOREST) )
)
:bind -->
:bind.Fact_Wildfire = {threat_indicator = "soot"}

Rule: FactFireBurningSmell
(
(({Lookup.majorType == smell})({Lookup.majorType == burn})) |
(({Lookup.majorType == burn})({Lookup.majorType == smell}))

)
:bind -->
:bind.Fact_Wildfire = {threat_indicator = "burning_smell"}

Rule: Skip
// леса горят багрянцем
// сухая ветвь
(
(({Token.string == "леса"})
({Token.string == "горят"})
({Token.string == "багрянцем"}))
|
(
({Token.string == "как"})
({Token.string == "сухая"})
({Token.string == "ветвь"})
)
)
:skip
 -->
{

gate.AnnotationSet sk = (gate.AnnotationSet)bindings.get("skip");
inputAS.removeAll(sk);
}