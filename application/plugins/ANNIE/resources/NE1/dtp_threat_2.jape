Phase:  Hole
Input: Morph Lookup Split Token
Options: control = appelt

 Macro: ADJ
(
({Morph.pos == adverb})?
({Morph.pos == verb, Morph.representation == participle} | {Morph.pos == a-pronoun}| {Morph.pos == adjective} )[0,4]

)

Macro: ROAD
(
(
(({Morph.baseForm == "участок"})?
(ADJ)[0,4]
{Lookup.majorType == road, Lookup.ProperName != "покрытие"})
|
({Lookup.majorType == road, Lookup.ProperName == "покрытие"})
)
(ADJ)?
) 


Rule: DestructionOccurred  // 7  провал произошёл
(((ADJ)
 (({Lookup.majorType == hole}):obj))
({Lookup.majorType == occur_verb}) ) 
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: DestructionOccurred2 // 8 произошёл провал
(({Lookup.majorType == occur_verb})
((ADJ)
 (({Lookup.majorType == hole, Lookup.ProperName != "отверстие"}):obj)))
:bind -->
{
gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}    

Rule: RoadDestroy // 9 грунт провалился, разрушился асфальт
(
(({Lookup.majorType == destroy_verb})
 (
 ({Morph.baseForm == "на"})
 ({Token.kind == number})
 (({Morph.baseForm == "метр"}) | ({Morph.baseForm == "метровый"}))
 )?
(({Morph.pos == preposition}) | ({Morph.baseForm == "в"}))?(ROAD))
)
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "hole_on_road", rule = "RoadDestroy" }


Rule: RoadDestroy2 // 9 грунт провалился
(
(ROAD)
((({Morph.baseForm == "на"})|({Morph.baseForm == "около"})|(({Morph.baseForm == "рядом"})({Morph.baseForm == "с"}))|({Morph.baseForm == "возле"})|({Morph.baseForm == "в"}))
(({Token.orth == upperInitial, Token.length >3})[1, 5] ): name)?
({Lookup.majorType == destroy_verb})
)
:bind -->
{
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", "hole_on_road");
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);

gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
if (nameSet != null &&  nameSet.size() > 0 ){
String name = "";
for (Annotation nameAnn:nameSet){
name = name + nameAnn.getFeatures().get("string").toString() + " ";
}
String obj_name = name + " ";
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", obj_name);
features_pl.put("rule", "RoadDestroy2");
outputAS.add(nameSet.firstNode(), nameSet.lastNode(), "Placement", features_pl);
}}

Rule: BadRoad // 10 плохая дорога, дорога очень плохая
 (
((({Lookup.majorType == defective, Lookup.mess_type != "fact"})|({Lookup.majorType == lack_for}))
({Morph.pos == adverb} )?  (ROAD))|
(((ROAD)) ({Morph.pos == adverb} )?
({Lookup.majorType == defective, Lookup.mess_type != "fact"}))
) 
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "hole_on_road"}


Rule: BadObject // 11 неисправный светофор, нет разметки !!Не работал светофор - не должно!
((({Lookup.majorType == defective})|({Lookup.majorType == lack_for}))  ({Morph.pos == adverb} )?
(({Token.kind == word}) ({Morph.baseForm == "или"}) )?
(({Lookup.majorType == object}):obj))
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: BadObject2 // 12 светофор неисправен  // Светофор в Набережных Челнах отключили
(
((({Lookup.majorType == object}):obj)) ((ADJ))?
((({Morph.baseForm == "на"})|({Morph.baseForm == "около"})|(({Morph.baseForm == "рядом"})({Morph.baseForm == "с"}))|({Morph.baseForm == "возле"})|({Morph.baseForm == "в"}))
(({Token.orth == upperInitial, Token.length >3})[1, 6] ): name)?
(({Lookup.majorType == defective})|({Lookup.majorType == lack_for}))
)
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);

gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
if (nameSet != null &&  nameSet.size() > 0 ){
String name = "";
for (Annotation nameAnn:nameSet){
name = name + nameAnn.getFeatures().get("string").toString() + " ";
}
String obj_name = name + " ";
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", obj_name);
features_pl.put("rule", "RoadDestroy2");
outputAS.add(nameSet.firstNode(), nameSet.lastNode(), "Placement", features_pl);
}
}

Rule: BadObject3 // работа светофора сбилась
(
({Morph.baseForm == "работа"})
({Lookup.majorType == object, Lookup.threat_indicator == "signal_damage"  })
(({Morph.baseForm == "сбиваться"}) )
)
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "signal_damage"}


/*
Rule: BadObject_znak // знака 1.1.1 нет перед прекрестком
(
({Morph.baseForm == "знак"})
(({Lookup.majorType == defective})|({Lookup.majorType == lack_for}))
)
:bind -->
{
}
*/



Rule: Gulley // 13 открытый дождеприемник
(
(({Lookup.majorType == open}) (({Morph.pos == preposition, Morph.baseForm == "на"})(ROAD))? ({Morph.pos == adverb} )?
(({Lookup.majorType == object, Lookup.threat_indicator == "gulley_manhole_damage" }):obj))
|
(({Morph.baseForm == "колесо"})(({Morph.baseForm == "в"})({Lookup.majorType == object, Lookup.threat_indicator == "gulley_manhole_damage" })))
)
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "gulley_manhole_damage"}



Rule: Flood // 14 затопило мост, дорога подтоплена
 ((({Lookup.majorType == flood})((ROAD)|({Lookup.majorType == object})))
|  							 
((((ROAD)|({Lookup.majorType == object})))({Lookup.majorType == flood}))
) 
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "sewerage_damage"}

// он провалился в канаву
//вплоть до отсутствия дорожного покрытия
// проездил с открытым люком
// в открытые люки Чугунные пушки

Rule: Skip
(
(({Token.string == "неисправным"})
({Token.string == "светофорам"})
({Token.string == "звоните"}))
|
(({Token})
({Morph.baseForm == "нет"})
({Morph.baseForm == "светофор"}))
|
(
({Token.kikd == "word"})[1,4]
({Token.string == "люк"})
( ({Morph.baseForm == "шлюзовый"})
 |
 ({Morph.baseForm == "самолет"})
 |
(({Token.string == "космодесантного"})|({Token.string == "бота"})|
(({Token.string == "в"})
({Token.string == "доме"})))
)
 )
|
(({Token.string == "он"})
({Token.string == "провалился"})
({Token.string == "в"})
({Token.string == "канаву"}))
|
(
(({Morph.baseForm == "проездить"})| ({Morph.baseForm == "ездить"}))
({Token.string == "с"})
({Token.string == "открытым"})
({Token.string == "люком"}))
|
(
({Token})
({Token.string == "люк"})
({Token.string == "танка"}))
|
(
({Token})
({Morph.baseForm == "люк"})
({Morph.baseForm == "из"})
{Morph.baseForm == "салон"})
)
:skip -->
{
gate.AnnotationSet sk = (gate.AnnotationSet)bindings.get("skip");
inputAS.removeAll(sk);
}

/*

дорожные знаки противоречат друг другу
*/

