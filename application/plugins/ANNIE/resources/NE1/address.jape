Phase:  Address
Input: Token Split Lookup Morph Threat_RoadAccident
Options: control = all


Rule: Address_inv   // Невский проспект
(
({Token.orth == upperInitial, Token.length >3}
): name
({Lookup.majorType == street, Lookup.ProperName != "проезжая часть"}): st
)
: bind  -->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.AnnotationSet morphSet = inputAS.getContained(nameSet.firstNode().getOffset(), nameSet.lastNode().getOffset()).get("Morph");
if (morphSet != null && morphSet.size() > 0){
gate.Annotation morphAnn = (gate.Annotation)morphSet.iterator().next();
//System.out.println("morphAnn = " + morphAnn);
if ((morphAnn.getFeatures().get("pos").toString() != "verb") && (morphAnn.getFeatures().get("pos").toString() != "substantive")  ){
String name = morphAnn.getFeatures().get("baseForm").toString();
if ( !(name.equals("больший") | (name.equals("большой"))| (name.equals("ночной"))| (name.equals("твой")) ))
{gate.AnnotationSet strSet = (gate.AnnotationSet)bindings.get("st");
gate.Annotation strAnn = (gate.Annotation)strSet.iterator().next();
String street = strAnn.getFeatures().get("ProperName").toString();
String str_gend = strAnn.getFeatures().get("gend").toString();
if (name.length()>3){
String n = name.substring(name.length()-2, name.length());
if (str_gend.equals("f") &&  ( n.equals("ий") || n.equals("ый") ))
 {name = name.substring(0, name.length()-2) + "ая";}
if (str_gend.equals("n") &&  ( n.equals("ий") || n.equals("ый") ))
 {name = name.substring(0, name.length()-2) + "ое";}
 }
else {
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
name = nameAnn.getFeatures().get("string").toString();
if (name.length()>2){
String n = name.substring(name.length()-2, name.length());
if (str_gend.equals("f") &&  ( n.equals("ую") || n.equals("ой") ))
 {name = name.substring(0, name.length()-2) + "ая";}
if (str_gend.equals("n") &&  ( n.equals("го") || n.equals("му")))
 {name = name.substring(0, name.length()-2) + "е";}
else {name = nameAnn.getFeatures().get("string").toString();
 }}}
gate.AnnotationSet bindSet = (gate.AnnotationSet)bindings.get("bind"); // 1
gate.Annotation bindAnn = (gate.Annotation)bindSet.iterator().next();
String street_name = street + " " + name;
gate.FeatureMap features_bind = Factory.newFeatureMap(); // 2
features_bind.put("view_name", street_name);
features_bind.put("Rule", "Address_inv");
outputAS.add(bindSet.firstNode(), bindSet.lastNode(), "Placement", features_bind);
}}}}


/*
Rule: Address_double
(
(({Lookup.majorType == street, Lookup.short == false}): st)
({Token.orth == upperInitial, Token.length >2, Token.string != "Москвы" }): name1
({Token.orth == upperInitial, Token.length >2 }): name2
)
:bind -->
*/

Rule: Address1
((({Lookup.majorType == street, Lookup.short == true}): st ({Token.string == "."})?)
({Token.orth == upperInitial, Token.length >2, Token.string != "Москвы" }): name)
:bind -->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.AnnotationSet morphSet = inputAS.getContained(nameSet.firstNode().getOffset(), nameSet.lastNode().getOffset()).get("Morph");
if (morphSet != null && morphSet.size() > 0){
gate.Annotation morphAnn = (gate.Annotation)morphSet.iterator().next();
String name = morphAnn.getFeatures().get("baseForm").toString();
gate.AnnotationSet strSet = (gate.AnnotationSet)bindings.get("st");
gate.Annotation strAnn = (gate.Annotation)strSet.iterator().next();
String street = strAnn.getFeatures().get("ProperName").toString();
String str_gend = strAnn.getFeatures().get("gend").toString();
if (name.length()>2){
String n = name.substring(name.length()-2, name.length());
if (str_gend.equals("f") &&  ( n.equals("ий") || n.equals("ый") ))
 {name = name.substring(0, name.length()-2) + "ая";}
if (str_gend.equals("n") &&  ( n.equals("ий") || n.equals("ый") ))
 {name = name.substring(0, name.length()-2) + "ое";}
 }
else {
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
name = nameAnn.getFeatures().get("string").toString();
if (name.length()>2){
String n = name.substring(name.length()-2, name.length());
if (str_gend.equals("f") &&  ( n.equals("ую") || n.equals("ой") ))
 {name = name.substring(0, name.length()-2) + "ая";}
if (str_gend.equals("n") &&  ( n.equals("го") || n.equals("му")))
 {name = name.substring(0, name.length()-2) + "е";}
 }
}
gate.AnnotationSet bindSet = (gate.AnnotationSet)bindings.get("bind");
gate.Annotation bindAnn = (gate.Annotation)bindSet.iterator().next();
String street_name = street + " " + name;
gate.FeatureMap features_bind = Factory.newFeatureMap();
features_bind.put("view_name", street_name);
outputAS.add(bindSet.firstNode(), bindSet.lastNode(), "Placement", features_bind);
}}

Rule: Address2
((({Lookup.majorType == street, Lookup.short == false}): st)
({Token.orth == upperInitial, Token.length >2, Token.string != "Москвы" }): name)
:bind -->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.AnnotationSet morphSet = inputAS.getContained(nameSet.firstNode().getOffset(), nameSet.lastNode().getOffset()).get("Morph");
if (morphSet != null && morphSet.size() > 0){
gate.Annotation morphAnn = (gate.Annotation)morphSet.iterator().next();
String name = morphAnn.getFeatures().get("baseForm").toString();
gate.AnnotationSet strSet = (gate.AnnotationSet)bindings.get("st");
gate.Annotation strAnn = (gate.Annotation)strSet.iterator().next();
String street = strAnn.getFeatures().get("ProperName").toString();
String str_gend = strAnn.getFeatures().get("gend").toString();
if (name.length()>2){
String n = name.substring(name.length()-2, name.length());
if (str_gend.equals("f") &&  ( n.equals("ий") || n.equals("ый") ))
 {name = name.substring(0, name.length()-2) + "ая";}
if (str_gend.equals("n") &&  ( n.equals("ий") || n.equals("ый") ))
 {name = name.substring(0, name.length()-2) + "ое";}
 }
else {
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
name = nameAnn.getFeatures().get("string").toString();
if (name.length()>2){
String n = name.substring(name.length()-2, name.length());
if (str_gend.equals("f") &&  ( n.equals("ую") || n.equals("ой") ))
 {name = name.substring(0, name.length()-2) + "ая";}
if (str_gend.equals("n") &&  ( n.equals("го") || n.equals("му")))
 {name = name.substring(0, name.length()-2) + "е";}
 }
}
gate.AnnotationSet bindSet = (gate.AnnotationSet)bindings.get("bind");
gate.Annotation bindAnn = (gate.Annotation)bindSet.iterator().next();
String street_name = street + " " + name;
gate.FeatureMap features_bind = Factory.newFeatureMap();
features_bind.put("view_name", street_name);
outputAS.add(bindSet.firstNode(), bindSet.lastNode(), "Placement", features_bind);
}}


Rule: Region // в Чебоксарском районе
(
({Token.orth == upperInitial, Token.length >3}) : name
({Lookup.majorType == region})  : r
)
:pl -->
{
//System.out.println("Region " );
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.AnnotationSet morphSet = inputAS.getContained(nameSet.firstNode().getOffset(), nameSet.lastNode().getOffset()).get("Morph");
if (morphSet != null &&  morphSet.size() > 0 ){
//System.out.println("Region 1" );
gate.Annotation morphAnn = (gate.Annotation)morphSet.iterator().next();
String name = morphAnn.getFeatures().get("baseForm").toString();
if ( !(name.equals("больший") | (name.equals("большой"))) ) {
//System.out.println("Region 2" );
String namePos = "";
Object pos = morphAnn.getFeatures().get("pos");
if (pos != null)
{
//System.out.println("Region 3" );
namePos = morphAnn.getFeatures().get("pos").toString();
}
if (name.length()>4 && namePos.equals("adjective")){
//System.out.println("Region 4" );
gate.AnnotationSet rSet = (gate.AnnotationSet)bindings.get("r");
gate.Annotation rAnn = (gate.Annotation)rSet.iterator().next();
String reg = rAnn.getFeatures().get("ProperName").toString();
String r_gend = rAnn.getFeatures().get("gend").toString();
String n = name.substring(name.length()-2, name.length());
if (r_gend.equals("f") &&  ( n.equals("ий") || n.equals("ый")))
 {
 name = name.substring(0, name.length()-2) + "ая";
 }
String region_name = name + " " + reg;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", region_name);
features_pl.put("place_type", "imprecise");
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}}
}
}

Rule: Region_inv //  микрорайон Такой-то
((({Lookup.majorType == region, Lookup.short == false}) |
(({Lookup.majorType == region, Lookup.short == true}) ({Token.string == "."}) )
) : r
({Token.orth == upperInitial, Token.length >3}) : name
)
:pl -->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
gate.AnnotationSet rSet = (gate.AnnotationSet)bindings.get("r");
gate.Annotation rAnn = (gate.Annotation)rSet.iterator().next();
if (rAnn.getType().toString().equals("Lookup"))
{String reg = rAnn.getFeatures().get("ProperName").toString();
String region_name = reg + " " + name;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", region_name);
features_pl.put("place_type", "imprecise");
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}}

Rule: Viezd // на выезде из
(
(({Morph.baseForm == "выезд"}) | ({Morph.baseForm == "въезд"})| ({Morph.baseForm == "поворот"})| ({Morph.baseForm == "кольцо"}))
(({Token.string == "из"}) | ({Token.string == "с"}) | ({Token.string == "от"}) | ({Token.string == "в"})| ({Token.string == "на"}))
({Token.orth == upperInitial, Token.length >3}): name
)
:pl -->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", name);
outputAS.add(nameSet.firstNode(), nameSet.lastNode(), "Placement", features_pl);
}

Rule: Crossroad // перекресток Молодежной и Ульянова
(
({Lookup.majorType == aux_crossroad}):obj
((({Lookup.majorType == street, Lookup.short == true}) ({Token.string == "."})?)| ({Lookup.majorType == street, Lookup.short == false}) )?
({Token.orth == upperInitial, Token.length >3}): first_name
(({Token.string == "и"})|({Token.string == "-"})|({Token.string == "–"})|({Token.string == "—"})|({Token.string == "/"}))?
((({Lookup.majorType == street, Lookup.short == true}) ({Token.string == "."})?)| ({Lookup.majorType == street, Lookup.short == false}) )?
({Token.orth == upperInitial, Token.length >3}): second_name
)
:pl -->
{
gate.AnnotationSet objSet = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)objSet.iterator().next();
String object = objAnn.getFeatures().get("ProperName").toString();
gate.AnnotationSet first_nameSet = (gate.AnnotationSet)bindings.get("first_name");
gate.Annotation first_nameAnn = (gate.Annotation)first_nameSet.iterator().next();
String first_name = first_nameAnn.getFeatures().get("string").toString();
gate.AnnotationSet second_nameSet = (gate.AnnotationSet)bindings.get("second_name");
gate.Annotation second_nameAnn = (gate.Annotation)second_nameSet.iterator().next();
String second_name = second_nameAnn.getFeatures().get("string").toString();
String crossroad_name = object + " " + first_name + " и " + second_name;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", crossroad_name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}

Rule: Crossroad_lowercase // перекресток молодежной и ульянова
((
({Lookup.majorType == aux_crossroad}):obj
((({Lookup.majorType == street, Lookup.short == true}) ({Token.string == "."})?)| ({Lookup.majorType == street, Lookup.short == false}) )?
({Token.orth == lowercase, Token.length >3}): first_name
(({Token.string == "и"})|({Token.string == "-"})|({Token.string == "–"})|({Token.string == "—"})|({Token.string == "/"}))?
((({Lookup.majorType == street, Lookup.short == true}) ({Token.string == "."})?)| ({Lookup.majorType == street, Lookup.short == false}) )?
({Token.orth == lowercase, Token.length >3}): second_name
):pl
({Threat_RoadAccident})
):bind
 -->
{
gate.AnnotationSet objSet = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)objSet.iterator().next();
String object = objAnn.getFeatures().get("ProperName").toString();
gate.AnnotationSet first_nameSet = (gate.AnnotationSet)bindings.get("first_name");
gate.Annotation first_nameAnn = (gate.Annotation)first_nameSet.iterator().next();
String first_name = first_nameAnn.getFeatures().get("string").toString();
gate.AnnotationSet second_nameSet = (gate.AnnotationSet)bindings.get("second_name");
gate.Annotation second_nameAnn = (gate.Annotation)second_nameSet.iterator().next();
String second_name = second_nameAnn.getFeatures().get("string").toString();
String crossroad_name = object + " " + first_name + " и " + second_name;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", crossroad_name);
features_pl.put("Rule", "Crossroad_lowercase");
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}

Rule: Crossroad_oneToken
(
(({Lookup.majorType == aux_crossroad})):obj
((({Lookup.majorType == street, Lookup.short == true}): st ({Token.string == "."})?)| ({Lookup.majorType == street, Lookup.short == false}) )?
(({Token.orth == upperInitial, Token.length >3})|({Token.orth == allCaps})): name
)
:pl -->
{
gate.AnnotationSet objSet = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)objSet.iterator().next();
String object = objAnn.getFeatures().get("ProperName").toString();
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
char[] ch = name.toCharArray();
for(int i=0; i<= ch.length-1; i++) {
String str = String.valueOf(ch[i]);
if (str.equals("-") | str.equals("–"))
{
String crossroad_name = object + " " + name;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", crossroad_name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}
}
}

Rule: Crossroad_oneToken_afterThreat
(
({Threat_RoadAccident})
(
(((({Lookup.majorType == street, Lookup.short == true}): st ({Token.string == "."})?)| ({Lookup.majorType == street, Lookup.short == false}))
|({Token.kind == "word" })[0,1] )
(({Token.orth == upperInitial, Token.length >3})|({Token.orth == allCaps})): name
) :pl
)
:bind -->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
char[] ch = name.toCharArray();
for(int i=0; i<= ch.length-1; i++) {
String str = String.valueOf(ch[i]);
if (str.equals("-") | str.equals("–"))
{
String crossroad_name = name;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", crossroad_name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}
}
}

Rule: Crossroad_short
((
({Morph.baseForm == "на"})?
({Token.orth == upperInitial, Token.length > 5}): first_name
(({Token.string == "-"})|({Token.string == "–"})|({Token.string == "/"})|({Token.string == "и"}))?
({Token.orth == upperInitial, Token.length >3, Token.string != "Ольга"}): second_name
) :pl
({Token})[0,1]
({Threat_RoadAccident})
((({Token.orth == upperInitial})({Token.orth != upperInitial}))|
(({Token.orth != upperInitial})({Token.orth == upperInitial}))|
(({Token.orth != upperInitial})({Token.orth != upperInitial})))
) :bind
-->
{
gate.AnnotationSet first_nameSet = (gate.AnnotationSet)bindings.get("first_name");
gate.Annotation first_nameAnn = (gate.Annotation)first_nameSet.iterator().next();
String first_name = first_nameAnn.getFeatures().get("string").toString();
gate.AnnotationSet second_nameSet = (gate.AnnotationSet)bindings.get("second_name");
gate.Annotation second_nameAnn = (gate.Annotation)second_nameSet.iterator().next();
String second_name = second_nameAnn.getFeatures().get("string").toString();
String crossroad_name = first_name + " " + second_name;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", crossroad_name);
features_pl.put("Rule", "Crossroad_short");
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}

Rule: Street_Oktiabria
(
(
({Token.kind == number}) : numb
(({Token.string == "-"})|({Token.string == "–"}))?
(({Morph.baseForm == "лет"}) | ({Morph.baseForm == "летa"}) | ({Morph.baseForm == "год"})| ({Morph.baseForm == "лето"})| ({Morph.baseForm == "летие"}) )
({Morph.baseForm == "октябрь"})
) :pl
({Token})[0,1]
({Threat_RoadAccident})
) :bind
-->
{
gate.AnnotationSet numbSet = (gate.AnnotationSet)bindings.get("numb");
gate.Annotation numbAnn = (gate.Annotation)numbSet.iterator().next();
String numb = numbAnn.getFeatures().get("string").toString();
String street_name = numb + "- летия Октября ";
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", street_name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}


Rule: Crossroad_in // перекресток в Ростове
(
(({Lookup.majorType == aux_crossroad}) | ({Lookup.majorType == street, Lookup.short == false}))
(({Morph.baseForm == "в"}) | ({Morph.baseForm == "с"}))
({Token.orth == upperInitial, Token.length >3}): name
):bind
-->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.AnnotationSet morphSet = inputAS.getContained(nameSet.firstNode().getOffset(), nameSet.lastNode().getOffset()).get("Morph");
if (morphSet != null && morphSet.size() > 0){
gate.Annotation morphAnn = (gate.Annotation)morphSet.iterator().next();
String name = morphAnn.getFeatures().get("baseForm").toString();
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", name);
outputAS.add(nameSet.firstNode(), nameSet.lastNode(), "Placement", features_pl);
}}





Rule: Street_short // на Ленинском сломан светофор
((
(({Morph.baseForm == "на"}) | ({Morph.baseForm == "по"}) | ({Morph.baseForm == "в"}))
({Token.orth == upperInitial, Token.length >3}): name
) :pl
({Token.kind == word})[0,2]
({Threat_RoadAccident})
) :bind
-->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.AnnotationSet locSet = inputAS.getContained(nameSet.firstNode().getOffset(), nameSet.lastNode().getOffset()).get("Loc");
if (locSet == null | !(locSet.size() > 0) ){
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", name);
features_pl.put("Rule", "Street_short");
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}}

Rule: Street_short_inv //сломан светофор на Ленинском
(
({Threat_RoadAccident})
(
({Morph.baseForm == "на"})
({Token.orth == upperInitial, Token.length >3}): name
) :pl
) :bind
-->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}


Rule: Street_short_first // На Ленинском...
((
({Token.string == "На"})
({Token.orth == upperInitial, Token.length >3,  Token.string != "Новый"}): name
) :pl
({Token}): str
) : bind
-->
{
gate.AnnotationSet strSet = (gate.AnnotationSet)bindings.get("str");
gate.AnnotationSet lookupSet = inputAS.getContained(strSet.firstNode().getOffset(), strSet.lastNode().getOffset()).get("Lookup");
String street = "";
if (lookupSet != null &&  lookupSet.size() > 0)
{
gate.Annotation lookupAnn = (gate.Annotation)lookupSet.iterator().next();
street = lookupAnn.getFeatures().get("majorType").toString();
}
if (!(street.equals("street") | (street.equals("road"))) | (!(lookupSet != null &&  lookupSet.size() > 0 )))
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = "на " +  nameAnn.getFeatures().get("string").toString();
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}}


Rule: Street_go_along // едешь по Ленинскому... , дорога от Борисово
(
(({Lookup.majorType == ride_verb}) | ({Lookup.majorType == road}) )
(({Morph.baseForm == "направо"}) | ({Morph.baseForm == "налево"}) | ({Morph.baseForm == "прямо"}))?
((({Morph.baseForm == "на"}) | ({Morph.baseForm == "по"}) | ({Morph.baseForm == "вдоль"})| ({Morph.baseForm == "от"})): prop
({Token.orth == upperInitial, Token.length >3}): name
) :pl
(({Token.kind == punctuation}))?
({Token.kind == word}): str
) : bind
-->
{
gate.AnnotationSet strSet = (gate.AnnotationSet)bindings.get("str");
gate.AnnotationSet lookupSet = inputAS.getContained(strSet.firstNode().getOffset(), strSet.lastNode().getOffset()).get("Lookup");
String street = "";
String prop = "";
String name = "";
if (lookupSet != null &&  lookupSet.size() > 0)
{
gate.Annotation lookupAnn = (gate.Annotation)lookupSet.iterator().next();
street = lookupAnn.getFeatures().get("majorType").toString();
}
if (!(street.equals("street") | (street.equals("road"))) | (!(lookupSet != null &&  lookupSet.size() > 0 )))
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name_str = nameAnn.getFeatures().get("string").toString();
gate.AnnotationSet propSet = (gate.AnnotationSet)bindings.get("prop");
gate.Annotation propAnn = (gate.Annotation)propSet.iterator().next();
prop = propAnn.getFeatures().get("baseForm").toString();
name = prop + " " + name_str;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", name);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}}


Rule: Street_short_numb // на Ленинском, 33
(
(({Morph.baseForm == "на"}) | ({Morph.baseForm == "с"}) | ({Morph.baseForm == "около"}))
({Token.orth == upperInitial, Token.length >3}): name
({Token.kind == punctuation, Token.string == ","})
(({Morph.baseForm == "дом"}) | ((({Morph.baseForm == "д"})| ({Morph.baseForm == "стр"}))({Token.kind == punctuation, Token.string == "."})))?
({Token.kind == "number"}) : numb

) :pl

-->
{
gate.AnnotationSet nameSet = (gate.AnnotationSet)bindings.get("name");
gate.Annotation nameAnn = (gate.Annotation)nameSet.iterator().next();
String name = nameAnn.getFeatures().get("string").toString();
gate.AnnotationSet numbSet = (gate.AnnotationSet)bindings.get("numb");
gate.Annotation numbAnn = (gate.Annotation)numbSet.iterator().next();
String number = numbAnn.getFeatures().get("string").toString();
String adr = name + ", " +  number;
gate.FeatureMap features_pl = Factory.newFeatureMap();
features_pl.put("view_name", adr);
gate.AnnotationSet plSet = (gate.AnnotationSet)bindings.get("pl");
outputAS.add(plSet.firstNode(), plSet.lastNode(), "Placement", features_pl);
}

Rule: MKAD // мкад
(
({Morph.baseForm == "мкад"})
) : bind
-->
:bind.Placement = {view_name = "МКАД"}

/*

Ошибки:

 на улице Карла Маркса - оба слова
 на перекрестке Павла Морозова и Вахова

 На проспекте Ленина , ул. Гагарина - не "улица гагарин"
 на Саетова-К.Маркса,
 в Дмитровском муниципальном районе
 Гусевского городского округа
 Народ, кто ездит по трассе Бурмистрово-Завьялово?
 Возле бывшего \"Реала\" (сейчас \"Ашан\")

 светофор на Б.Гагарина-Студенческая не работает с самого утра

Новости читателей Машина йошкаролинца чуть не провалилась в люк, запорошенный снегом http://pg12.ru/publicnews/view/455 #йошкарола

*/