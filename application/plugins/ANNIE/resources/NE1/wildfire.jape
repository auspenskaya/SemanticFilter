Phase:  Wildfire
Input: Token Lookup
Options: control = appelt

Macro: IN_FOREST
(
(({Token, Token.string == "в"})|({Token, Token.string == "на"})|({Token, Token.string == "над"}))
({Lookup.majorType == forest})
)

Macro: NEAR
(
({Token, Token.string == "около"})|
(({Token, Token.string == "рядом"})({Token, Token.string == "с"}))|
(({Token, Token.string == "в"})({Token, Token.string == "районе"}))
)

Rule: DryGrass // сухая трава
(
({Lookup.majorType == dry})
({Lookup.majorType == grass})
(IN_FOREST)
)
:bind -->
:bind.Threat_Wildfire = {threat_indicator = "dry_grass"}

Rule: DryTrees // сухие деревья
(
(({Lookup.majorType == dry})|({Lookup.majorType == rubbish_adj}))
({Lookup.majorType == trees})
)
:bind -->
:bind.Threat_Wildfire = {threat_indicator = "dry_trees"}


Rule: Rubbish // мусор, намусорили в лесу
(
(({Lookup.majorType == rubbish})|({Lookup.majorType == fire_litter_verb}))
(IN_FOREST)
)
:bind -->
:bind.Threat_Wildfire = {threat_indicator = "rubbish"}



Rule: FactFire
(
((({Lookup.majorType == forest})|({Lookup.majorType == peat}))({Lookup.majorType == burn})) |
(({Lookup.majorType == burn})(({Lookup.majorType == forest})|({Lookup.majorType == peat}))) | // лес, торф горит
(({Lookup.majorType == burn})(NEAR)) // горит около
)
:bind -->
:bind.Fact_Wildfire = {threat_indicator = "fire"}

Rule: FactSmoke
(
({Lookup.majorType == fire}):f
(IN_FOREST)
)
:bind -->
{gate.AnnotationSet fire = (gate.AnnotationSet)bindings.get("f");
gate.Annotation fireAnn = (gate.Annotation)fire.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", fireAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Fact_Wildfire", features);
}

Rule: FactSmoke2
(
(IN_FOREST)
({Lookup.majorType == fire}):f
)
:bind -->
{gate.AnnotationSet fire = (gate.AnnotationSet)bindings.get("f");
gate.Annotation fireAnn = (gate.Annotation)fire.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", fireAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Fact_Wildfire", features);
}

Rule: FactSmoke3
(
({Lookup.majorType == forest})({Token, Token.string == "в"})({Lookup.majorType == fire}):f
)
:bind -->
{gate.AnnotationSet fire = (gate.AnnotationSet)bindings.get("f");
gate.Annotation fireAnn = (gate.Annotation)fire.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", fireAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Fact_Wildfire", features);
}

Rule: FactFireSoot
(
(({Lookup.majorType == soot})({Token, Token.string == "на"})
({Lookup.majorType == soot_on, Lookup.ProperName != "дорога" })) |
(({Lookup.majorType == soot})({Token, Token.string == "на"})
({Lookup.majorType == soot_on, Lookup.ProperName == "дорога" }) (IN_FOREST) )
)
:bind -->
:bind.Fact_Wildfire = {threat_indicator = "soot"}

Rule: FactFireBurningSmell
(
({Lookup.majorType == smell})({Lookup.majorType == burn})(IN_FOREST)

)
:bind -->
:bind.Fact_Wildfire = {threat_indicator = "burning_smell"}