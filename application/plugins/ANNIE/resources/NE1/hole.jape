Phase:  Hole
Input: Morph Lookup Split
Options: control = appelt

 Macro: ADJ
(
({Morph.pos == adverb})?
({Morph.pos == verb, Morph.representation == participle} | {Morph.pos == a-pronoun}| {Morph.pos == adjective} )?
({Morph.pos == verb, Morph.representation == participle} | {Morph.pos == a-pronoun}| {Morph.pos == adjective} )?
({Morph.pos == verb, Morph.representation == participle} | {Morph.pos == a-pronoun}| {Morph.pos == adjective} )?
)

Macro: ROAD
(
(ADJ)*{Lookup.majorType == road}(ADJ)?
) 
 
Rule: HoleOnHole //яма на яме ...
(
(({Lookup.majorType == hole}) : hole1)
({Morph.pos == preposition, Morph.baseForm == "на"})
(({Lookup.majorType == hole}): hole2)
)
:bind -->
//:bind.Threat_RoadAccident = {threat_indicator = "hole_on_road"}
{gate.AnnotationSet hole1 = (gate.AnnotationSet)bindings.get("hole1");
gate.Annotation hole1Ann = (gate.Annotation)hole1.iterator().next();
gate.AnnotationSet hole2 = (gate.AnnotationSet)bindings.get("hole2");
gate.Annotation hole2Ann = (gate.Annotation)hole2.iterator().next();
if (hole1Ann.getFeatures().get("ProperName") == hole2Ann.getFeatures().get("ProperName")) 
{gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", hole1Ann.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(hole1);
inputAS.removeAll(hole2);}
}
 
Rule: HoleOnRoad //провал грунта,  дыра в асфальте
(((ADJ) 
 (({Lookup.majorType == hole}):obj)
)({Morph.pos == preposition})?(ROAD))		
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: RoadWithHoles  //дорога в ямах
((ROAD)({Morph.pos == preposition})?(
(ADJ)(({Lookup.majorType == hole}):obj)
))		
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: RideInHole 		// влететь в яму 
(({Lookup.majorType == ridein_verb})({Morph.pos == preposition} )   
(ADJ)(({Lookup.majorType == hole}):obj))
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}   
 
Rule: RideInObject // налететь на объект
(({Lookup.majorType == ridein_verb})({Morph.pos == preposition} )
(ADJ)(({Lookup.majorType == object}):obj))
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}   

Rule: RideInObject2 //  на объект налететь
((({Morph.pos == preposition} )
(ADJ) (({Lookup.majorType == object}):obj)) ({Lookup.majorType == ridein_verb}))
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}   
 
Rule: DestructionOccurred  // 3 провал произошёл
(((ADJ)
 (({Lookup.majorType == hole}):obj))
({Lookup.majorType == occur_verb}) ) 
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: DestructionOccurred2 // произошёл провал
(({Lookup.majorType == occur_verb})
((ADJ)
 (({Lookup.majorType == hole}):obj)))
:bind -->
{
gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}    

Rule: RoadDestroy // 2 грунт провалился, разрушился асфальт
(
(({Lookup.majorType == destroy_verb}) ({Morph.pos == preposition} )?
(ROAD))|  							 
(((ROAD)) 
({Lookup.majorType == destroy_verb}))
)
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "hole_on_road"}

Rule: BadRoad // плохая дорога, дорога очень плохая
 (
(({Lookup.majorType == defective}) ({Morph.pos == adverb} )?
(ROAD))|  							 
(((ROAD)) ({Morph.pos == adverb} )?
({Lookup.majorType == defective}))
) 
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "hole_on_road"}

Rule: BadObject // неисправный светофор
(({Lookup.majorType == defective}) ({Morph.pos == adverb} )?
(({Lookup.majorType == object}):obj))
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: BadObject2 // светофор неисправен
(((({Lookup.majorType == object}):obj)) ({Morph.pos == adverb} )?
({Lookup.majorType == defective}))
:bind -->
{gate.AnnotationSet obj = (gate.AnnotationSet)bindings.get("obj");
gate.Annotation objAnn = (gate.Annotation)obj.iterator().next();
gate.FeatureMap features = Factory.newFeatureMap();
features.put("threat_indicator", objAnn.getFeatures().get("threat_indicator"));
gate.AnnotationSet bind = (gate.AnnotationSet)bindings.get("bind");
outputAS.add(bind.firstNode(), bind.lastNode(), "Threat_RoadAccident", features);
inputAS.removeAll(obj);
}  

Rule: Flood // затопило мост, дорога подтоплена
 (
(({Lookup.majorType == flood})((ROAD)|({Lookup.majorType == object})))
|  							 
((((ROAD)|({Lookup.majorType == object})))({Lookup.majorType == flood}))
) 
:bind -->
:bind.Threat_RoadAccident = {threat_indicator = "sewerage_damage"}

